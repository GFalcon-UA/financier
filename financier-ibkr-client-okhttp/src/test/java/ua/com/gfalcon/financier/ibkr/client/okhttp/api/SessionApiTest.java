/*
 *   Copyright 2016-2022 Oleksii V. KHALIKOV
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

/*
 * Client Portal Web API
 * Client Poral Web API
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package ua.com.gfalcon.financier.ibkr.client.okhttp.api;

import org.junit.Ignore;
import org.junit.Test;

import ua.com.gfalcon.financier.ibkr.model.AuthStatus;

/**
 * API tests for SessionApi
 */
@Ignore
public class SessionApiTest {

    private final SessionApi api = new SessionApi();


    /**
     * Authentication Status
     * <p>
     * Current Authentication status to the Brokerage system. Market Data and Trading is not possible if not
     * authenticated, e.g. authenticated shows false
     *
     * @throws Exception if the Api call fails
     */
    @Test
    public void iserverAuthStatusPostTest() throws Exception {
        AuthStatus response = api.iserverAuthStatusPost();

        // TODO: test validations
    }

    /**
     * Tries to re-authenticate to Brokerage
     * <p>
     * When using the CP Gateway, this endpoint provides a way to reauthenticate to the Brokerage system as long as
     * there is a valid SSO session, see /sso/validate.
     *
     * @throws Exception if the Api call fails
     */
    @Test
    public void iserverReauthenticatePostTest() throws Exception {
        AuthStatus response = api.iserverReauthenticatePost();

        // TODO: test validations
    }

    /**
     * Ends the current session
     * <p>
     * Logs the user out of the gateway session. Any further activity requires re-authentication.
     *
     * @throws Exception if the Api call fails
     */
    @Test
    public void logoutPostTest() throws Exception {
        Object response = api.logoutPost();

        // TODO: test validations
    }

    /**
     * Validate SSO
     * <p>
     * Validates the current session for the SSO user
     *
     * @throws Exception if the Api call fails
     */
    @Test
    public void ssoValidateGetTest() throws Exception {
        Object response = api.ssoValidateGet();

        // TODO: test validations
    }

    /**
     * Ping the server to keep the session open
     * <p>
     * If the gateway has not received any requests for several minutes an open session will automatically timeout. The
     * tickle endpoint pings the server to prevent the session from ending.
     *
     * @throws Exception if the Api call fails
     */
    @Test
    public void ticklePostTest() throws Exception {
        api.ticklePost();

        // TODO: test validations
    }

}

/*
 *   Copyright 2016-2022 Oleksii V. KHALIKOV
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

/*
 * Client Portal Web API
 * Client Poral Web API
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package ua.com.gfalcon.financier.ibkr.client.okhttp.api;

import java.util.List;

import org.junit.Ignore;
import org.junit.Test;

import ua.com.gfalcon.financier.ibkr.model.Body;
import ua.com.gfalcon.financier.ibkr.model.Conid;
import ua.com.gfalcon.financier.ibkr.model.Contract;
import ua.com.gfalcon.financier.ibkr.model.Secdef;
import ua.com.gfalcon.financier.ibkr.model.SecdefInfo;
import ua.com.gfalcon.financier.ibkr.model.Symbol;

/**
 * API tests for ContractApi
 */
@Ignore
public class ContractApiTest {

    private final ContractApi api = new ContractApi();


    /**
     * IB Algo Params
     * <p>
     * Returns supported IB Algos for contract. Must be called a second time to query the list of available parameters.
     *
     * @throws Exception if the Api call fails
     */
    @Test
    public void iserverContractConidAlgosGetTest() throws Exception {
        String conid = null;
        String algos = null;
        String addDescription = null;
        String addParams = null;
        List<Object> response = api.iserverContractConidAlgosGet(conid, algos, addDescription, addParams);

        // TODO: test validations
    }

    /**
     * Info and Rules
     * <p>
     * Returns both contract info and rules from a single endpoint. For only contract rules, use the endpoint
     * /iserver/contract/rules. For only contract info, use the endpoint /iserver/contract/{conid}/info.
     *
     * @throws Exception if the Api call fails
     */
    @Test
    public void iserverContractConidInfoAndRulesGetTest() throws Exception {
        String conid = null;
        Boolean isBuy = null;
        Object response = api.iserverContractConidInfoAndRulesGet(conid, isBuy);

        // TODO: test validations
    }

    /**
     * Contract Details
     * <p>
     * Using the Contract Identifier get contract info. You can use this to prefill your order before you submit an
     * order
     *
     * @throws Exception if the Api call fails
     */
    @Test
    public void iserverContractConidInfoGetTest() throws Exception {
        String conid = null;
        Contract response = api.iserverContractConidInfoGet(conid);

        // TODO: test validations
    }

    /**
     * Contract Rules
     * <p>
     * Returns trading related rules for a specific contract and side. For both contract info and rules use the endpoint
     * /iserver/contract/{conid}/info-and-rules.
     *
     * @throws Exception if the Api call fails
     */
    @Test
    public void iserverContractRulesPostTest() throws Exception {
        Conid conid = null;
        Object response = api.iserverContractRulesPost(conid);

        // TODO: test validations
    }

    /**
     * Secdef Info
     * <p>
     * Provides Contract Details of Futures, Options, Warrants, Cash and CFDs based on conid. To get the strike price
     * for Options/Warrants use \&quot;/iserver/secdef/strikes\&quot; endpoint. Must call /secdef/search for the
     * underlying contract first.
     *
     * @throws Exception if the Api call fails
     */
    @Test
    public void iserverSecdefInfoGetTest() throws Exception {
        String conid = null;
        String sectype = null;
        String month = null;
        String exchange = null;
        String strike = null;
        String right = null;
        List<SecdefInfo> response = api.iserverSecdefInfoGet(conid, sectype, month, exchange, strike, right);

        // TODO: test validations
    }

    /**
     * Search by Symbol or Name
     * <p>
     * Search by underlying symbol or company name. Relays back what derivative contract(s) it has. This endpoint must
     * be called before using /secdef/info. If company name is specified will only receive limited response: conid,
     * companyName, companyHeader and symbol.
     *
     * @throws Exception if the Api call fails
     */
    @Test
    public void iserverSecdefSearchPostTest() throws Exception {
        Symbol symbol = null;
        List<Object> response = api.iserverSecdefSearchPost(symbol);

        // TODO: test validations
    }

    /**
     * Search Strikes
     * <p>
     * Query strikes for Options/Warrants. For the conid of the underlying contract, available contract months and
     * exchanges use \&quot;/iserver/secdef/search\&quot;
     *
     * @throws Exception if the Api call fails
     */
    @Test
    public void iserverSecdefStrikesGetTest() throws Exception {
        String conid = null;
        String sectype = null;
        String month = null;
        String exchange = null;
        Object response = api.iserverSecdefStrikesGet(conid, sectype, month, exchange);

        // TODO: test validations
    }

    /**
     * Security Futures by Symbol
     * <p>
     * Returns a list of non-expired future contracts for given symbol(s)
     *
     * @throws Exception if the Api call fails
     */
    @Test
    public void trsrvFuturesGetTest() throws Exception {
        String symbols = null;
        Object response = api.trsrvFuturesGet(symbols);

        // TODO: test validations
    }

    /**
     * Secdef by Conid
     * <p>
     * Returns a list of security definitions for the given conids
     *
     * @throws Exception if the Api call fails
     */
    @Test
    public void trsrvSecdefPostTest() throws Exception {
        Body body = null;
        Secdef response = api.trsrvSecdefPost(body);

        // TODO: test validations
    }

    /**
     * Get trading schedule for symbol
     * <p>
     * Returns the trading schedule up to a month for the requested contract
     *
     * @throws Exception if the Api call fails
     */
    @Test
    public void trsrvSecdefScheduleGetTest() throws Exception {
        String assetClass = null;
        String symbol = null;
        String exchange = null;
        String exchangeFilter = null;
        Object response = api.trsrvSecdefScheduleGet(assetClass, symbol, exchange, exchangeFilter);

        // TODO: test validations
    }

    /**
     * Security Stocks by Symbol
     * <p>
     * Returns an object contains all stock contracts for given symbol(s)
     *
     * @throws Exception if the Api call fails
     */
    @Test
    public void trsrvStocksGetTest() throws Exception {
        String symbols = null;
        Object response = api.trsrvStocksGet(symbols);

        // TODO: test validations
    }

}

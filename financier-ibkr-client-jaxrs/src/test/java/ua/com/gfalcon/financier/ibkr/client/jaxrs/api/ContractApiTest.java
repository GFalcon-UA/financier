/*
 *   Copyright 2016-2022 Oleksii V. KHALIKOV
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

/**
 * Client Portal Web API
 * Client Poral Web API
 * <p>
 * OpenAPI spec version: 1.0.0
 * <p>
 * <p>
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package ua.com.gfalcon.financier.ibkr.client.jaxrs.api;

import java.util.ArrayList;
import java.util.List;

import org.apache.cxf.jaxrs.client.ClientConfiguration;
import org.apache.cxf.jaxrs.client.JAXRSClientFactory;
import org.apache.cxf.jaxrs.client.WebClient;
import org.junit.Before;
import org.junit.Test;

import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;

import ua.com.gfalcon.financier.ibkr.model.Body;
import ua.com.gfalcon.financier.ibkr.model.Conid;
import ua.com.gfalcon.financier.ibkr.model.Symbol;


/**
 * Client Portal Web API
 *
 * <p>Client Poral Web API
 *
 * API tests for ContractApi 
 */
public class ContractApiTest {


    private ContractApi api;

    /**
     * IB Algo Params
     *
     * Returns supported IB Algos for contract. Must be called a second time to query the list of available parameters.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void iserverContractConidAlgosGetTest() {
        String conid = null;
        String algos = null;
        String addDescription = null;
        String addParams = null;
        //List<Object> response = api.iserverContractConidAlgosGet(conid, algos, addDescription, addParams);
        //assertNotNull(response);
        // TODO: test validations


    }

    /**
     * Info and Rules
     *
     * Returns both contract info and rules from a single endpoint. For only contract rules, use the endpoint /iserver/contract/rules. For only contract info, use the endpoint /iserver/contract/{conid}/info.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void iserverContractConidInfoAndRulesGetTest() {
        String conid = null;
        Boolean isBuy = null;
        //Object response = api.iserverContractConidInfoAndRulesGet(conid, isBuy);
        //assertNotNull(response);
        // TODO: test validations


    }

    /**
     * Contract Details
     *
     * Using the Contract Identifier get contract info. You can use this to prefill your order before you submit an order
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void iserverContractConidInfoGetTest() {
        String conid = null;
        //Contract response = api.iserverContractConidInfoGet(conid);
        //assertNotNull(response);
        // TODO: test validations


    }

    /**
     * Contract Rules
     *
     * Returns trading related rules for a specific contract and side. For both contract info and rules use the endpoint /iserver/contract/{conid}/info-and-rules.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void iserverContractRulesPostTest() {
        Conid conid = null;
        //Object response = api.iserverContractRulesPost(conid);
        //assertNotNull(response);
        // TODO: test validations


    }

    /**
     * Secdef Info
     *
     * Provides Contract Details of Futures, Options, Warrants, Cash and CFDs based on conid. To get the strike price for Options/Warrants use \&quot;/iserver/secdef/strikes\&quot; endpoint. Must call /secdef/search for the underlying contract first.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void iserverSecdefInfoGetTest() {
        String conid = null;
        String sectype = null;
        String month = null;
        String exchange = null;
        String strike = null;
        String right = null;
        //List<SecdefInfo> response = api.iserverSecdefInfoGet(conid, sectype, month, exchange, strike, right);
        //assertNotNull(response);
        // TODO: test validations


    }

    /**
     * Search by Symbol or Name
     *
     * Search by underlying symbol or company name. Relays back what derivative contract(s) it has. This endpoint must be called before using /secdef/info. If company name is specified will only receive limited response: conid, companyName, companyHeader and symbol.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void iserverSecdefSearchPostTest() {
        Symbol symbol = null;
        //List<Object> response = api.iserverSecdefSearchPost(symbol);
        //assertNotNull(response);
        // TODO: test validations


    }

    /**
     * Search Strikes
     *
     * Query strikes for Options/Warrants. For the conid of the underlying contract, available contract months and exchanges use \&quot;/iserver/secdef/search\&quot;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void iserverSecdefStrikesGetTest() {
        String conid = null;
        String sectype = null;
        String month = null;
        String exchange = null;
        //Object response = api.iserverSecdefStrikesGet(conid, sectype, month, exchange);
        //assertNotNull(response);
        // TODO: test validations


    }

    @Before
    public void setup() {
        JacksonJsonProvider provider = new JacksonJsonProvider();
        List providers = new ArrayList();
        providers.add(provider);

        api = JAXRSClientFactory.create("https://localhost:5000/v1/api", ContractApi.class, providers);
        org.apache.cxf.jaxrs.client.Client client = WebClient.client(api);

        ClientConfiguration config = WebClient.getConfig(client);
    }

    /**
     * Security Futures by Symbol
     *
     * Returns a list of non-expired future contracts for given symbol(s)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void trsrvFuturesGetTest() {
        String symbols = null;
        //Object response = api.trsrvFuturesGet(symbols);
        //assertNotNull(response);
        // TODO: test validations


    }

    /**
     * Secdef by Conid
     *
     * Returns a list of security definitions for the given conids
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void trsrvSecdefPostTest() {
        Body body = null;
        //Secdef response = api.trsrvSecdefPost(body);
        //assertNotNull(response);
        // TODO: test validations


    }

    /**
     * Get trading schedule for symbol
     *
     * Returns the trading schedule up to a month for the requested contract
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void trsrvSecdefScheduleGetTest() {
        String assetClass = null;
        String symbol = null;
        String exchange = null;
        String exchangeFilter = null;
        //Object response = api.trsrvSecdefScheduleGet(assetClass, symbol, exchange, exchangeFilter);
        //assertNotNull(response);
        // TODO: test validations


    }

    /**
     * Security Stocks by Symbol
     *
     * Returns an object contains all stock contracts for given symbol(s)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void trsrvStocksGetTest() {
        String symbols = null;
        //Object response = api.trsrvStocksGet(symbols);
        //assertNotNull(response);
        // TODO: test validations


    }

}

/*
 *   Copyright 2016-2022 Oleksii V. KHALIKOV
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

/**
 * Client Portal Web API
 * Client Poral Web API
 * <p>
 * OpenAPI spec version: 1.0.0
 * <p>
 * <p>
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package ua.com.gfalcon.financier.ibkr.client.jaxrs.api;

import java.util.ArrayList;
import java.util.List;

import org.apache.cxf.jaxrs.client.ClientConfiguration;
import org.apache.cxf.jaxrs.client.JAXRSClientFactory;
import org.apache.cxf.jaxrs.client.WebClient;
import org.junit.Before;
import org.junit.Test;

import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;

import ua.com.gfalcon.financier.ibkr.model.AlertRequest;
import ua.com.gfalcon.financier.ibkr.model.Body;


/**
 * Client Portal Web API
 *
 * <p>Client Poral Web API
 *
 * API tests for AlertApi 
 */
public class AlertApiTest {


    private AlertApi api;

    /**
     * Activate or deactivate an alert
     *
     * Please note, if alertId is 0, it will activate/deactivate all alerts
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void iserverAccountAccountIdAlertActivatePostTest() {
        String accountId = null;
        Body body = null;
        //Object response = api.iserverAccountAccountIdAlertActivatePost(accountId, body);
        //assertNotNull(response);
        // TODO: test validations


    }

    /**
     * Delete an alert
     *
     * Please be careful, if alertId is 0, it will delete all alerts
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void iserverAccountAccountIdAlertAlertIdDeleteTest() {
        String accountId = null;
        String alertId = null;
        //Object response = api.iserverAccountAccountIdAlertAlertIdDelete(accountId, alertId);
        //assertNotNull(response);
        // TODO: test validations


    }

    /**
     * Create or modify alert
     *
     * Please note here, DO NOT pass orderId when creating a new alert, toolId is only required for MTA alert
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void iserverAccountAccountIdAlertPostTest() {
        String accountId = null;
        AlertRequest body = null;
        //Object response = api.iserverAccountAccountIdAlertPost(accountId, body);
        //assertNotNull(response);
        // TODO: test validations


    }

    /**
     * Get a list of available alerts
     *
     * The response will contain both active and inactive alerts, but it won&#39;t have MTA alert
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void iserverAccountAccountIdAlertsGetTest() {
        String accountId = null;
        //List<Object> response = api.iserverAccountAccountIdAlertsGet(accountId);
        //assertNotNull(response);
        // TODO: test validations


    }

    /**
     * Get details of an alert
     *
     * Use the endpoint /iserver/account/:accountId/alerts to receive the alert id. The order_id in the response is the alert id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void iserverAccountAlertIdGetTest() {
        String id = null;
        //AlertResponse response = api.iserverAccountAlertIdGet(id);
        //assertNotNull(response);
        // TODO: test validations


    }

    /**
     * Get MTA alert
     *
     * Each login user only has one mobile trading assistant (MTA) alert with it&#39;s own unique tool id. The tool id cannot be changed. When modified a new order Id is generated. MTA alerts can not be created or deleted. If you call delete /iserver/account/:accountId/alert/:alertId, it will reset MTA to default. See [here](https://www.interactivebrokers.com/en/software/mobileiphonemobile/mobileiphone.htm#monitor/trading-assistant.htm) for more information on MTA alerts.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void iserverAccountMtaGetTest() {
        //AlertResponse response = api.iserverAccountMtaGet();
        //assertNotNull(response);
        // TODO: test validations


    }

    @Before
    public void setup() {
        JacksonJsonProvider provider = new JacksonJsonProvider();
        List providers = new ArrayList();
        providers.add(provider);

        api = JAXRSClientFactory.create("https://localhost:5000/v1/api", AlertApi.class, providers);
        org.apache.cxf.jaxrs.client.Client client = WebClient.client(api);

        ClientConfiguration config = WebClient.getConfig(client);
    }

}
